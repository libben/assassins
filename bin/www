#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Assassins:server');
var http = require('http');
var events = require('events');
var cradle = require('cradle');
var open = require('amqplib').connect('amqp://localhost');
var db = new(cradle.Connection)().database('assassins');
var eventEmitter = new events.EventEmitter();

/*
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/*
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
 * RabbitMQ receiver setup.
 */

open.then(function(conn) { // Remember, this receiver is opened before the sender is
  var ok = conn.createChannel();
  ok = ok.then(function(ch) {
   var q = 'sockety';
   ch.assertQueue(q, {durable: false}); // Queue will not persist after rebooting RabbitMQ server
   ch.consume(q, function(msg) {
     console.log(" [x] Received %s", msg.content.toString());
     if (msg.content.toString() === 'start_timer') {
       eventEmitter.emit('start_timer');
       console.log('I emitted start_timer as an event.');
     }
     ch.ack(msg); // Acknowledge receipt of message
   });
  });
  return ok;
});

/*
 * Socketing protocol.
 */

var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('got_it', function(data) {
    console.log('- ' + data);
  });
  socket.on('join', function(data) {
    console.log('user joined and says, \'' + data + '\'');
  });
  socket.on('query', function(data) {
    console.log('Received ' + data);
    db.get(data, function (err, doc) {
      console.log(doc.name);
      console.log(doc.killword);
      socket.emit('response', {
        name: doc.name,
        killword: doc.killword
      });
    });
  });
});
eventEmitter.on('start_timer', function() {
  var count = 20; //CHANGE
  var counter = setInterval(function () {
    io.sockets.emit('count_update', count);
    console.log('emmitted count_update to frontend');
    count = count - 1;
    if (count < 1) {
      app.locals.game_on = 1;
      console.log('Changed app.locals.game_on to ' + app.locals.game_on);
      clearInterval(counter);
      io.sockets.emit('game_on', null);
    }
  }, 1000);
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
