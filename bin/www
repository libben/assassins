#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var router = require('../routes/index');
var debug = require('debug')('Assassins:server');
var http = require('http');
var events = require('events');
var cradle = require('cradle');
var c = new(cradle.Connection);
var event_emitter = new events.EventEmitter();

/*
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/*
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
 * Socketing protocol.
 */
var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('got_it', function(data) {
    console.log('- ' + data);
  });
  socket.on('disconnect', function(){
    console.log('a user disconnected');
  });
  socket.on('join', function(data) {
    console.log('user joined and says, "' + data + '"');
    socket.join(data);
  });
});
router.event_emitter.on('game_countdown', function(game_id) {
  var count = 20; //CHANGE
  var counter = setInterval(function () {
    io.to(game_id).emit('count_update', count);
    console.log('emmitted count_update to frontend');
    count = count - 1;
    if (count < 0) { // I'm saying to do this whent the count is less than zero because when I set it to trigger at (count < 1) the timer disappeared when it showed the number 2.
      clearInterval(counter);
      io.to(game_id).emit('game_on');
      var db = c.database('game_' + game_id);
      var instances_db = c.database('instances');
      db.merge('game_on', {val: 1, countdown: 0, game_start_time: new Date().getTime()}, function(err,res) {
        if (err) {
          console.error('Error at location 4627: ' + err.message);
        }
      });
      instances_db.merge(game_id, {is_game_on: 1}, function(err,res) {
        if (err) {
          console.error('Error at location 2736: ' + err.message);
        } else {
          router.game_statuses[game_id] = 1; // This setting doesn't have to be done within this loop, but that's what I'm doing
        }
      });
    }
  }, 1000);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
